// Code generated by go-swagger; DO NOT EDIT.

package rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ervitis/freelancetools/exchangerate/models"
)

// HistoricalReader is a Reader for the Historical structure.
type HistoricalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HistoricalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHistoricalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewHistoricalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewHistoricalTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHistoricalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHistoricalOK creates a HistoricalOK with default headers values
func NewHistoricalOK() *HistoricalOK {
	return &HistoricalOK{}
}

/* HistoricalOK describes a response with status code 200, with default header values.

The foreign exchange reference rates
*/
type HistoricalOK struct {
	Payload *models.Rates
}

func (o *HistoricalOK) Error() string {
	return fmt.Sprintf("[GET /historical][%d] historicalOK  %+v", 200, o.Payload)
}
func (o *HistoricalOK) GetPayload() *models.Rates {
	return o.Payload
}

func (o *HistoricalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rates)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHistoricalNotFound creates a HistoricalNotFound with default headers values
func NewHistoricalNotFound() *HistoricalNotFound {
	return &HistoricalNotFound{}
}

/* HistoricalNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type HistoricalNotFound struct {
	Payload *models.Error
}

func (o *HistoricalNotFound) Error() string {
	return fmt.Sprintf("[GET /historical][%d] historicalNotFound  %+v", 404, o.Payload)
}
func (o *HistoricalNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *HistoricalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHistoricalTooManyRequests creates a HistoricalTooManyRequests with default headers values
func NewHistoricalTooManyRequests() *HistoricalTooManyRequests {
	return &HistoricalTooManyRequests{}
}

/* HistoricalTooManyRequests describes a response with status code 429, with default header values.

Rate limit
*/
type HistoricalTooManyRequests struct {
	Payload *models.Error
}

func (o *HistoricalTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /historical][%d] historicalTooManyRequests  %+v", 429, o.Payload)
}
func (o *HistoricalTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *HistoricalTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHistoricalInternalServerError creates a HistoricalInternalServerError with default headers values
func NewHistoricalInternalServerError() *HistoricalInternalServerError {
	return &HistoricalInternalServerError{}
}

/* HistoricalInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type HistoricalInternalServerError struct {
	Payload *models.Error
}

func (o *HistoricalInternalServerError) Error() string {
	return fmt.Sprintf("[GET /historical][%d] historicalInternalServerError  %+v", 500, o.Payload)
}
func (o *HistoricalInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *HistoricalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
