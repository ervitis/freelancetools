// Code generated by go-swagger; DO NOT EDIT.

package symbols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSymbolsParams creates a new GetSymbolsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSymbolsParams() *GetSymbolsParams {
	return &GetSymbolsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSymbolsParamsWithTimeout creates a new GetSymbolsParams object
// with the ability to set a timeout on a request.
func NewGetSymbolsParamsWithTimeout(timeout time.Duration) *GetSymbolsParams {
	return &GetSymbolsParams{
		timeout: timeout,
	}
}

// NewGetSymbolsParamsWithContext creates a new GetSymbolsParams object
// with the ability to set a context for a request.
func NewGetSymbolsParamsWithContext(ctx context.Context) *GetSymbolsParams {
	return &GetSymbolsParams{
		Context: ctx,
	}
}

// NewGetSymbolsParamsWithHTTPClient creates a new GetSymbolsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSymbolsParamsWithHTTPClient(client *http.Client) *GetSymbolsParams {
	return &GetSymbolsParams{
		HTTPClient: client,
	}
}

/* GetSymbolsParams contains all the parameters to send to the API endpoint
   for the get symbols operation.

   Typically these are written to a http.Request.
*/
type GetSymbolsParams struct {

	/* AccessKey.

	   API Key
	*/
	AccessKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get symbols params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSymbolsParams) WithDefaults() *GetSymbolsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get symbols params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSymbolsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get symbols params
func (o *GetSymbolsParams) WithTimeout(timeout time.Duration) *GetSymbolsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get symbols params
func (o *GetSymbolsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get symbols params
func (o *GetSymbolsParams) WithContext(ctx context.Context) *GetSymbolsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get symbols params
func (o *GetSymbolsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get symbols params
func (o *GetSymbolsParams) WithHTTPClient(client *http.Client) *GetSymbolsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get symbols params
func (o *GetSymbolsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessKey adds the accessKey to the get symbols params
func (o *GetSymbolsParams) WithAccessKey(accessKey string) *GetSymbolsParams {
	o.SetAccessKey(accessKey)
	return o
}

// SetAccessKey adds the accessKey to the get symbols params
func (o *GetSymbolsParams) SetAccessKey(accessKey string) {
	o.AccessKey = accessKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetSymbolsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param access_key
	qrAccessKey := o.AccessKey
	qAccessKey := qrAccessKey
	if qAccessKey != "" {

		if err := r.SetQueryParam("access_key", qAccessKey); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
